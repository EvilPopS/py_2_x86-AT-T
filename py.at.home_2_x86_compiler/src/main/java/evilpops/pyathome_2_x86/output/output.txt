.section .data
	NONE: .asciz "None"
	FLOAT_ZERO: .double 0.0
	UNDEFINED: .asciz "Undefined"
	PRINT_INT_OR_BOOL_FORMAT: .asciz "%d\n"
	PRINT_FLOAT: .asciz "%.3f\n"
	PRINT_STRING_FORMAT: .asciz "%s\n"
.section .text
.globl main
main:
	pushq %rbp
	andq $-16, %rsp
	movq %rsp, %rbp
	subq $16, %rsp
	movq $1, -16(%rbp)
	subq $16, %rsp
	movq $2, -32(%rbp)
	movq -16(%rbp), %rdi
	movq -32(%rbp), %rsi
	addq $32, %rsp
	call L_FUNC_a_1
main_end:
	movq $60, %rax
	xorq %rdi, %rdi
	syscall

L_FUNC_a_1:
	pushq %rbp
	movq %rsp, %rbp

	subq $16, %rsp
	movq %rdi, -16(%rbp)
	subq $16, %rsp
	movq %rsi, -32(%rbp)
	movq $NONE, %rax
L_FUNC_a_1_END:
	movq %rbp, %rsp
	popq %rbp
	ret

L_FUNC_BUILT_IN_STRING_CONCAT:
	pushq %rbp
	movq %rsp, %rbp

	subq $32, %rsp
	movq %rdi, -16(%rbp)
	movq %rsi, -24(%rbp)

	movq -16(%rbp), %rdi	
	call strlen@plt
	movq %rax, %r10

	movq -24(%rbp), %rdi	
	call strlen@plt
	addq %rax, %r10

	movq %r10, %rdi
	call malloc@plt
	movq %rax, -32(%rbp)	

	movq -32(%rbp), %rdi
	movq -16(%rbp), %rsi
	call strcpy@plt

	movq -32(%rbp), %rdi
	movq -24(%rbp), %rsi
	call strcat@plt

	movq -32(%rbp), %rax

	addq $32, %rsp
	movq %rbp, %rsp
	popq %rbp
	ret

L_FUNC_BUILT_IN_STRING_MUL:
	pushq %rbp
	movq %rsp, %rbp

	subq $32, %rsp
	movq %rdi, -16(%rbp)
	movq %rsi, -24(%rbp)

	movq -16(%rbp), %rdi	
	call strlen@plt
	movq %rax, %r10

	cmpq $0, -24(%rbp) 
	jle SM_EMPTY_RES	
	cmpq $0, %r10 
	je SM_EMPTY_RES	

	imulq -24(%rbp), %r10

	movq %r10, %rdi
	call malloc@plt
	movq %rax, -32(%rbp)

SM_CAT_ITER_START:
	cmpq $0, -24(%rbp)	
	je SM_END

	movq -32(%rbp), %rdi
	movq -16(%rbp), %rsi
	call strcat@plt

	subq $1, -24(%rbp)
	jmp SM_CAT_ITER_START

SM_EMPTY_RES:
	movq $0, %rdi
	call malloc@plt
	movq %rax, -32(%rbp)
	jmp SM_END	

SM_END:
	movq -32(%rbp), %rax

	addq $32, %rsp
	movq %rbp, %rsp
	popq %rbp
	ret

L_FUNC_BUILT_IN_STRING_CMP:
	pushq %rbp
	movq %rsp, %rbp

	call strcmp@plt
	cdqe

	movq %rbp, %rsp
	popq %rbp
	ret

L_FUNC_BUILT_IN_STRING_TO_BOOL:
	pushq %rbp
	movq %rsp, %rbp

	call strlen@plt
	movq %rax, %r10
	cmp $0, %r10
	je STB_EMPTY_STRING
	movq $1, %rax
	jmp STB_END

STB_EMPTY_STRING:
	movq $0, %rax

STB_END:	
	movq %rbp, %rsp
	popq %rbp
	ret

